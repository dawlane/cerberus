
> C++TOOL SETTINGS
This is a list of all precompiler configuration settings for the C++ Tool target.~n
<table>
<tr><td>
>>> Compiler Options
[#MINGW_USE_STATIC](#static)~n
[#MINGW_USE_POSIX](#posix)~n
[#CC_USE_MINGW](#use_mingw)~n
[#CC_OPTS](#cc_opts)~n
[#CC_VS_CC_OPTS](#vs_cc_opts)~n
[#CC_VS_INCLUDES](#vs_includes)~n
[#CC_VS_HEADER_PATHS](#vs_header_paths)~n
[#CC_VS_DEFINES](#vs_defines)~n
</td><td>
>>> Linker Options
[#CC_LD_OPTS](#gcc_ld_opts)~n
[#CC_LIBS](#cc_libs)~n
[#CC_VS_LIB_PATHS](#vs_lib_paths)~n
[#CC_VS_LIB_OPTS](#vs_lib_opts)~n
</td><td>
>>> Miscellaneous Options
[#CC_APP_NAME](#name)~n
[#CC_USE_ICON](#use_icon)~n
[#CC_VSTUDIO_VERSION](#vstudio_version)~n
</td></tr>
</table>

>> Compiler Options
<a name="static">
>>> #MINGW_USE_STATIC
</a>
<pre>Cerberus Default: #MINGW_USE_STATIC=False
</pre>
>>>> Compiler: MinGW
>>>> Operating System: MS Windows only.
>>>> Advanced: Only advanced users of MinGW should use this preprocessor directive.
This preprocessor directive is for MinGW compilers that do not create stand alone applications, such as the original MinGW-w64 who's default is to require dynamic run-time libraries to be distributed along with the final executable. It's used to statically link libstdc++6, the libgcc run-time and winptheard into the main executable.~n
MinGW compilers such as TDM-GCC do not need to use any static or POSIX preprocessor directives as these types of compilers usually are cabable of building stand alone applications.
NOTE: The preprocessor directive [#MINGW_USE_POSIX](#posix) default is set to 'True'. If you are using a non POSIX version of MinGW with [#MINGW_USE_STATIC](#static) or it's sister preprocessor directive [[Programming/Config Settings/GLFW DESKTOP SETTINGS##GLFW_MINGW_STATIC]]. Then you should set #MINGW_USE_POSIX to 'False'.
Also note that the helper application sharedtrans cannot tell if a version of MinGW already creates stand-allone applications and will still copy over run-time libraries that have to be manually removed.
<pre>
Example:
' Use non POSIX static linking.
#MINGW_USE_STATIC=True
#MINGW_USE_POSIX=False
</pre>


<a name="posix">
>>> #MINGW_USE_POSIX
</a>
<pre>Cerberus Default: #MINGW_USE_POSIX=True
</pre>
>>>> Compiler: MinGW and Visual Studio
>>>> Operating System: MS Windows only.
>>>> Advanced: Only advanced users of MinGW should use this preprocessor directive.
How you set this directive dependeds on if you have a MinGW compiler that has POSIX threading. It's used in conjunction with [#MINGW_USE_STATIC](#static} and [[Programming/Config Settings/GLFW DESKTOP SETTINGS##GLFW_MINGW_STATIC]].


<a name="use_mingw">
>>> #CC_USE_MINGW
</a>
<pre>Cerberus Default: #CC_USE_MINGW=True
</pre>
>>>> Compiler: MinGW and Visual Studio
>>>> Operating System: MS Windows only.
Use this to switch between the back-end compiler tool chains. The default is set to true to use the MinGW tool chain. Setting this to 'False' will build Console applications with Visual Studio's MSBuild command line tool. Note that you will need to have at least the minuimum of Visual Studio 2015 installed.


<a name="cc_opts">
>>> #CC_OPTS
</a>
<pre>Cerberus Default: #CC_OPTS=""
</pre>
>>>> Compiler: MinGw, Linux GCC and Apple GCC.
>>>> Operating System: All.
>>>> Advanced: Only advanced users of the back-end compilers should use this preprocessor directive.
This directive is used to pass all compiler options to the back-end compiler.


<a name="vs_cc_opts">
>>> #CC_VS_CC_OPTS
</a>
<pre>
Cerberus Default: #CC_VS_CC_OPTS=""
</pre>
>>>> Compiler: Visual Studio
>>>> Operating System: MS Windows only.
>>>> Advanced: Only advanced users of Visual Studio should use this preprocessor directive.
You can you this preprocessor directive to pass addition options to the Visual Studio compiler. See Addition Options in the Visual Studio documentation.
<pre>
Example:
#CC_VS_CC_OPTS="/MD /Ox" ' Set Multi threaded DLL and optimizations for fats code
</pre>

<a name="vs_includes">
>>> #CC_VS_INCLUDES
</a>
<pre>
Cerberus Default: #CC_VS_INCLUDES=""
</pre>
>>>> Compiler: Visual Studio
>>>> Operating System: MS Windows only.
>>>> Advanced: Only advanced users of Visual Studio should use this preprocessor directive.
This is a convenience preprocessor directive. It passes include header search directories in the format /Ipath_to_include_directory. See Addition Includeds Directories in the Visual Studio documentation.
<pre>
Example:
#CC_VS_INCLUDES="Includepath1;IncludePath2"
</pre>


<a name="vs_header_paths">
>>> #CC_VS_HEADER_PATHS
</a>
<pre>
Cerberus Default: #CC_VS_HEADER_PATHS=""
</pre>
>>>> Compiler: Visual Studio
>>>> Operating System: MS Windows only.
>>>> Advanced: Only advanced users of Visual Studio should use this preprocessor directive.
This is a convenience preprocessor directive. It passes header search directories in the format /AIpath_to_include_directory. See Additional #using Directories in the Visual Studio documentation.
<pre>
Example:
#CC_VS_HEADER_PATHS="Includepath1;IncludePath2"
</pre>


<a name="vs_defines">
>>> #CC_VS_DEFINES
</a>
<pre>
Cerberus Default: #CC_VS_DEFINES=""
</pre>
>>>> Compiler: Visual Studio
>>>> Operating System: MS Windows only.
>>>> Advanced: Only advanced users of Visual Studio should use this preprocessor directive.
This preprocessor directive is use to pass set #define directives to the back-end compiler. See Preprocessor Definitions in the Visual Studio documentation.
<pre>
Example:
#CC_VS_DEFINES="__VISUAL_STUDIO__;_NOT_MINGW_"
</pre>

>> Linker Options

<a name="gcc_ld_opts">
>>> #CC_LD_OPTS
</a>
<pre>
Cerberus Default: #CC_LD_OPTS=""
</pre>
>>>> Compiler: MinGw, Linux GCC and Apple GCC.
>>>> Operating System: All.
>>>> Advanced: Only advanced users of MinGW, Linux GCC and Apple GCC should use this preprocessor directive.
This preprocessor directive allows you to command options to the linker.
<pre>
Example:
#CC_GCC_LD_OPTS="-LPATH_TO_LIBRARIES -Wl,--subsystem,windows"
</pre>


<a name="cc_libs">
>>> #CC_LIBS
</a>
<pre>Cerberus Default: #CC_LIBS=""
</pre>
>>>> Compiler: MinGw, Linux GCC and Apple GCC.
>>>> Operating System: All.
>>>> Advanced: Only advanced users of the back-end compilers should use this preprocessor directive.
This directive is used to pass all library options to the back-end compiler.


<a name="vs_lib_paths">
>>> #CC_VS_LIB_PATHS
</a>
<pre>
Cerberus Default: #CC_VS_LIB_PATHS=""
</pre>
>>>> Compiler: Visual Studio
>>>> Operating System: MS Windows only.
>>>> Advanced: Only advanced users of Visual Studio should use this preprocessor directive.
This preprocessor directive allows you to pass paths to search for libraries. See Addition Library Directories in the Visual Studio documentation.
<pre>
Example:
#CC_VS_LIB_PATHS="MyFramework1;MyFramework2"
</pre>

<a name="vs_lib_opts">
>>> #CC_VS_LIB_OPTS
</a>
<pre>
Cerberus Default: #CC_VS_LIB_OPTS=""
</pre>
>>>> Compiler: Visual Studio
>>>> Operating System: MS Windows only.
>>>> Advanced: Only advanced users of Visual Studio should use this preprocessor directive.
This preprocessor directive allows you to pass library linking options to the linker. See Additional Dependencies in the Visual Studio documentation.
<pre>
Example:
#CC_VS_LIB_OPTS="openAl32;Opengl32"
</pre>

>> Miscellaneous Options

<a name="name">
>>> #CC_APP_NAME
</a>
<pre>Cerberus Default: #CC_APP_NAME="main"
</pre>
>>>> Compiler: MinGw, Linux GCC and Mac OS X.
>>>> Operating System: MS Windows only.
This directive is use to set the final executable name when built.


<a name="use_icon">
>>> #CC_USE_ICON
</a>
<pre>Cerberus Default: #CC_USE_ICON=False
</pre>
>>>> Compiler: MinGw and Visual Studio
>>>> Operating System: MS Windows only.
Setting this to 'True' will you add an icon to your final executable. The icon must be already saved with the name icon.ico file.~n


<a name="vstudio_version">
>>> #GLFW_VSTUDIO_VERSION
</a>
<pre>
Default: #GLFW_VSTUDIO_VERSION="2017"
</pre>
>>>> Compiler: Visual Studio
>>>> Operating System: MS Windows
This directive will allow you to select which of the project templates to use for complation.
